generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BridgeRequest {
  id                      Int                   @id @default(autoincrement())
  asset                   String                @db.VarChar
  source_address          String                @db.VarChar
  destination_address     String                @db.VarChar
  source_transaction      String?               @unique @db.VarChar
  destination_transaction String?               @db.VarChar
  source_chain            Chain
  destination_chain       Chain
  status                  BridgeRequestStatus
  amount                  String                @db.VarChar
  failure_reason          FailureReason?
  completed_at            DateTime?             @db.Timestamp(6)
  created_at              DateTime              @default(now()) @db.Timestamp(6)
  started_at              DateTime?             @db.Timestamp(6)
  updated_at              DateTime              @default(now()) @updatedAt @db.Timestamp(6)
  wiron_burn_transaction  String?               @db.VarChar
  failures                FailedBridgeRequest[]

  @@index([source_address], map: "index_bridge_request_on_source_address")
  @@index([destination_address], map: "index_bridge_request_on_destination_address")
  @@index([wiron_burn_transaction], map: "index_bridge_request_wiron_burn_transaction")
  @@index([completed_at], map: "index_bridge_requests_on_completed_at")
  @@index([started_at, completed_at], map: "index_bridge_requests_on_completed_at_and_started_at")
  
  @@map("bridge_requests")
}

model FailedBridgeRequest {
  id                Int            @id @default(autoincrement())
  bridge_request_id Int?
  failure_reason    FailureReason
  error             String?        @db.VarChar
  bridge_request    BridgeRequest? @relation(fields: [bridge_request_id], references: [id])

  @@index([bridge_request_id], map: "index_failed_bridge_request_on_bridge_request_id")
  @@map("failed_bridge_requests")
}

model IronFishTestnetHead {
  hash String @unique @db.VarChar

  @@map("iron_fish_testnet_head")
}

model WIronSepoliaHead {
  id     Int    @id
  hash   String @db.VarChar
  height Int

  @@map("wiron_sepolia_head")
}

enum Chain {
  IRONFISH
  ETHEREUM

  @@map("chain_name")
}

enum BridgeRequestStatus {
  CREATED
  PENDING_PRETRANSFER
  PENDING_ON_DESTINATION_CHAIN
  CONFIRMED
  FAILED
  PENDING_WIRON_BURN_TRANSACTION_CREATION
  PENDING_WIRON_BURN_TRANSACTION_CONFIRMATION
  PENDING_IRON_RELEASE_TRANSACTION_CREATION
  PENDING_IRON_RELEASE_TRANSACTION_CONFIRMATION

  @@map("bridge_request_status")
}

enum FailureReason {
  REQUEST_NON_EXISTENT
  REQUEST_INVALID_STATUS
  REQUEST_SOURCE_ADDRESS_NOT_MATCHING
  REQUEST_AMOUNT_NOT_MATCHING
  REQUEST_ASSET_NOT_MATCHING
  WIRON_BURN_TRANSACTION_FAILED

  @@map("failure_reason")
}
